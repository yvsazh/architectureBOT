import asyncio
from io import BytesIO
from PIL import Image
import numpy as np
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from config import TOKEN, class_names_ua, class_names_en
from model import model, img_width, img_height
import tensorflow as tf

from keep_alive import keep_alive
keep_alive()

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç!ü§ó\n–ù–∞–¥—ñ—à–ª–∏ –º–∞–ª—é–Ω–æ–∫ –±—É–¥—ñ–≤–ª—ñ —ñ —è —Å–∫–∞–∂—É —Ç–æ–±—ñ, –≤ —è–∫–æ–º—É —Å—Ç–∏–ª—ñ –≤–æ–Ω–∞ –±—É–ª–∞ –ø–æ–±—É–¥–æ–≤–∞–Ω–∞!‚õ©Ô∏è\n–Ø –∑–Ω–∞—é —Ü—ñ–ª–∏—Ö 48 —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤! –Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ü–µ, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /help!ü§´")

@dp.message(Command("help"))
async def help(message: Message):
    help_message = "–Ø - –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—Ç–∏–ª—å –ª–∏—à–µ –ø–æ —Ñ–æ—Ç–æ –±—É–¥—ñ–≤–ª—ñ!üßê\n–Ø –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ü—ñ–ª–∏—Ö 48 —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:\n\n"
    for i in range(len(class_names_ua)):
        help_message += f"{i+1}. {class_names_ua[i]} ({class_names_en[i]})\n"
    help_message += "\n–°–ø–æ–¥—ñ–≤–∞—é—Å—å —è –∑–º—ñ–≥ —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏!üòÑ"
    await message.answer(help_message)


@dp.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ —è–∫ –±–∞–π—Ç–∏
    file = await bot.get_file(photo.file_id)
    file_bytes = await bot.download_file(file.file_path)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç BytesIO —Ç–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image_stream = BytesIO(file_bytes.read())
    img = Image.open(image_stream)
    img = img.resize((img_height, img_width))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–∞—Å–∏–≤
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    
    predictions = model.predict(img_array)
    score = tf.nn.softmax(predictions[0])
    
    await message.answer(
        f"–ë—É–¥—ñ–≤–ª—è –ø–æ–±—É–¥–æ–≤–∞–Ω–∞ —É —Å—Ç–∏–ª—ñ: {class_names_ua[np.argmax(score)]}({class_names_en[np.argmax(score)]})"
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())